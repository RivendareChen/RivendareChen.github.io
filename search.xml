<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>函数传参的一些问题</title>
      <link href="/2022/10/13/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/13/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>无论是什么编程语言，函数的传参方式一般都有两种方式：一种按值传递，另外一种按引用传递；今天我们具体来说一下JS中这两种传参方式。<br>在介绍传值方式之前，先说一下js中数据类型，分为基本类型和引用类型：</p><p>基本类型：undefined、Null、Boolean、Number、String、Symbol<br>引用类型：Object</p><p>两种类型的数据最本质的区别是基本类型直接存储的变量的值，而引用类型存储的是变量的应用地址。下面开始介绍js中函数传值方式：</p><h3 id="1、按值传递"><a href="#1、按值传递" class="headerlink" title="1、按值传递"></a>1、按值传递</h3><p>按值传递说的就是参数都是基础类型，直接传递参数的数值。举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num = num + <span class="number">2</span>; </span><br><span class="line">    <span class="keyword">return</span> num; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">let</span> result = getNum(num); </span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>个很好理解了，因为num是基本数据类型，传值时直接拷贝字面量给参数，所以在函数执行后num原来的数据大小是不会发生变化的，函数中存储的仅仅是num的一个副本而已。</p><h3 id="2、引用传值"><a href="#2、引用传值" class="headerlink" title="2、引用传值"></a>2、引用传值</h3><p>引用传值，实际上传递的是参数的地址，而非数值。在方法调用时，实际的参数是对象（或者数组），这时js函数中的参数args的值会保存实际参数的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.name = <span class="string">&#x27;riven&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// riven</span></span><br></pre></td></tr></table></figure><p>为何改变函数参数obj中name的值，person中的name也会发生改变呢，是因为obj与person指向的是同一个内存地址，所以obj中name改变会引起person中name的改变。</p><h3 id="3、共享传递"><a href="#3、共享传递" class="headerlink" title="3、共享传递"></a>3、共享传递</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.name = <span class="string">&quot;riven&quot;</span></span><br><span class="line">  o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = <span class="string">&quot;chen&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">func(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// yimao</span></span><br></pre></td></tr></table></figure><p>为什么会打印riven?因为在进入函数开始时对象obj和参数o是指向同一个内存地址的，代表的是同一个对象，此时设置o.name = “riven”，obj中的name也会被修改为name。但是函数中第二句o = new Object()将o的地址指向了另外一个新对象，所以o指向的对象不再是obj指向的对象，所以改变o中name的值不会影响到obj中属性的值，因此打印结果为riven。</p><h3 id="4、C-指针的引用"><a href="#4、C-指针的引用" class="headerlink" title="4、C++指针的引用"></a>4、C++指针的引用</h3><p>由js共享传递想到C++类似传参问题可以用指针的指针解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointerRef</span><span class="params">(<span class="keyword">int</span> *&amp;p)</span></span>&#123;</span><br><span class="line">    p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;v;</span><br><span class="line"><span class="built_in">pointerRef</span>(p);</span><br><span class="line">std::cout&lt;&lt;*p; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 拾遗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据加密方法</title>
      <link href="/2022/09/11/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"/>
      <url>/2022/09/11/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-非对称加密"><a href="#1-非对称加密" class="headerlink" title="1. 非对称加密"></a>1. 非对称加密</h3><p>加密和解密使用不同的秘钥。</p><p>A拥有公钥A和私钥A；B拥有公钥B和私钥B。公钥任何人都可以知道，而私钥只能自己掌握。</p><p>例如：</p><pre><code>A向B发送消息：· A使用公钥B加密消息· B收到加密消息后使用私钥B解密B向A返回消息：· B使用公钥A加密返回信息· A收到返回信息后使用私钥A解密信息。</code></pre><p>相对于<strong>加密解密依赖同一把秘钥</strong>的对称加密，非对称加密不需要传输私钥，大大提高了安全性。</p><h3 id="2-签名"><a href="#2-签名" class="headerlink" title="2. 签名"></a>2. 签名</h3><p>上节中的例子可以防止第三方破解传输的密文，但是无法防止<strong>中间人攻击</strong>。</p><p>例如:</p><pre><code>A向B发送消息：· A使用**公钥B**加密消息· C拦截A发给B的消息· C使用公钥B加密假消息并发给B· B将C的假消息误认为是A发来的真消息</code></pre><p>因此我们需要<strong>签名</strong>来确保发送的信息不被第三方篡改。</p><p>例如：</p><pre><code>A向B发送消息：· 用明文生成一段较短的摘要。· 用A的私钥加密这段摘要。· 加密摘要和明文一起被再次加密后传给B。· B解密明文和加密摘要。· B使用A的公钥解密出摘要，再用收到的明文算出一段摘要。· 比较解密的摘要和明文的摘要，若一致则安全，若不一致则数据被篡改。</code></pre><p>注意，例子中的加密、解密、摘要算法都使用的是非对称加密。对加密摘要和明文的再次加密可能有<a href="https://blog.csdn.net/u010312474/article/details/102815899">更复杂的流程</a>,此处仅为简单介绍。</p><h3 id="3-上层应用"><a href="#3-上层应用" class="headerlink" title="3. 上层应用"></a>3. 上层应用</h3><ul><li><p>本人的<a href="https://github.com/RivendareChen/quant/blob/master/futu-quant/socket.js">量化交易系统</a>中应用了数字签名的部分内容(生成sha1摘要)，详见Line197-200(签名)和Line318-324(验证)。</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/32513816">SSL协议之数据加密过程详解</a>。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 基础-&gt;实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义antd组件样式</title>
      <link href="/2022/08/14/%E8%87%AA%E5%AE%9A%E4%B9%89antd%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/08/14/%E8%87%AA%E5%AE%9A%E4%B9%89antd%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Antd的自定义样式，可以通过官方推荐的craco进行配置，详见<a href="https://blog.csdn.net/Loonger29/article/details/119346714">此处</a>，但这些样式均为全局生效。本文将介绍如何配置局部生效的自定义样式。</p><p>方案的总体思路可见参考<a href="https://blog.csdn.net/qq_43382853/article/details/108324623">这篇文章</a>。本文将以实际开发中的一个例子进行讲解。</p><p>对于Antd的Menu UI，用户点击子项后子项的背景色将会变化，但变化后的颜色默认参照craco.config.js中配置的primary-color。为了不修改primary-color，也为了仅在某个Menu UI中局部生效，需要在该组件对应的样式文件中进行修改。</p><ul><li><p>第一步是确定Menu UI被选中元素的类名</p><p>打开浏览器的F12“检查”界面，选择“被选中元素”的代码块查看其“样式”，如下图所示。</p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89antd%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/%E6%88%AA%E5%B1%8F2022-08-14%2020.29.00.png" alt="确定类名" style="zoom:200%;" /></li></ul><p>​        可以发下被选中元素的独有类名为ant-menu-item-selected。</p><ul><li><p>第二步修改对应的样式文件样式文件</p><p>自定义Menu UI位于项目的Star组件中，因此需要修改的是Star.module.css。在该文件中添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">global</span>(.folder .ant-menu-item-selected)&#123;</span><br><span class="line">    background-color: <span class="number">#191970</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中folder是指该Menu所处div的类名。<strong>需要特别注意的是</strong>folder类名在Star.jsx中的声明不能使用CSS Module的形式。例如：<code>&lt;Menu className=&quot;folder&quot;\&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Menu className=&#123;styles.folder&#125;\&gt; <span class="comment">//错误</span></span><br><span class="line">  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">className</span>=<span class="string">&quot;folder&quot;</span>\&gt;</span> //正确</span></span><br></pre></td></tr></table></figure><p>且Menu所处div不能使用类选择器（如<code>.folder&#123;...&#125;</code>）了，而需要使用<code>:global(.folder)&#123;...&#125;</code>进行样式设置，否则不生效。</p></li></ul><p>至此，对Menu组件被选中元素背景色的自定义就成功了，效果如下图所示：</p><img  src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89antd%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/%E6%88%AA%E5%B1%8F2022-08-14%2020.48.18.png" alt="最终效果" align="left" style="zoom:33%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片测试</title>
      <link href="/2022/08/13/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/08/13/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h3><img src="/images/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/9092q1c05o4wbc8t8m3alzid8nnf5bo.png" alt="9092q1c05o4wbc8t8m3alzid8nnf5bo" style="zoom:200%;" /><h3 id="Github-Pages-Hexo-Typora配置方法"><a href="#Github-Pages-Hexo-Typora配置方法" class="headerlink" title="Github Pages + Hexo + Typora配置方法"></a>Github Pages + Hexo + Typora配置方法</h3><p>配置的总体思路参考<a href="https://juejin.cn/post/6998539442881298469">这里</a>。需要注意的有两点：</p><p>1 每次用typora编辑一篇新md文档时，都要设置图片根目录为source，设置位置在Typora工具栏（格式=&gt;图像=&gt;设置图片根目录）。</p><p>2 不一定要配置hexo的post_asset_floder为true，可以直接在Typora编辑器中插入图片（格式=&gt;图像=&gt;插入图片），如果按照攻略设置了“复制到指定路径”，该图片会被自动添加到source/images文件夹中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redux补充1</title>
      <link href="/2022/07/23/redux%E8%A1%A5%E5%85%85/"/>
      <url>/2022/07/23/redux%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h3 id="1-只能在-createSlice-和-createReducer-中操作state！"><a href="#1-只能在-createSlice-和-createReducer-中操作state！" class="headerlink" title="1. 只能在 createSlice 和 createReducer 中操作state！"></a>1. 只能在 createSlice 和 createReducer 中操作state！</h3><p>因为它们在内部使用 Immer！如果你在没有 Immer 的 reducer 中操作state，它将改变状态并导致错误！</p><h3 id="2-在-Redux-中，永远-不允许在-reducer-中更改-state-的原始对象！"><a href="#2-在-Redux-中，永远-不允许在-reducer-中更改-state-的原始对象！" class="headerlink" title="2. 在 Redux 中，永远 不允许在 reducer 中更改 state 的原始对象！"></a>2. 在 Redux 中，永远 不允许在 reducer 中更改 state 的原始对象！</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 非法 - 默认情况下，这将更改 state！</span></span><br><span class="line">state.value = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>不能在 Redux 中更改 state 有几个原因：</p><ul><li>它会导致 bug，例如 UI 未正确更新以显示最新值</li><li>它会导致 bug，例如 UI 未正确更新以显示最新值</li><li>更难理解状态更新的原因和方式</li><li>编写测试变得更加困难</li><li>它打破了正确使用“时间旅行调试”的能力</li><li>它违背了 Redux 的预期精神和使用模式</li></ul><h3 id="3-Reducer-中必需要先创建原始值的副本，然后可以改变副本"><a href="#3-Reducer-中必需要先创建原始值的副本，然后可以改变副本" class="headerlink" title="3. Reducer 中必需要先创建原始值的副本，然后可以改变副本!"></a>3. Reducer 中必需要先创建原始值的副本，然后可以改变副本!</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 这样操作是安全的，因为创建了副本</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  ...state,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 包库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react下对less的配置</title>
      <link href="/2022/07/19/react%E4%B8%8B%E5%AF%B9less%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/19/react%E4%B8%8B%E5%AF%B9less%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>less是css的超集，支持变量、逻辑等高级功能。</p><h2 id="1-create-react-app-Antd-less"><a href="#1-create-react-app-Antd-less" class="headerlink" title="1. create-react-app + Antd + less"></a>1. create-react-app + Antd + less</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><font color=red>配置</font></h3><p>Antd使用less作为样式文件，其在react中的配置见<a href="https://ant.design/docs/react/use-with-create-react-app-cn">此处</a>。</p><p>配置教程的”高级设置”小节中，如果在安装”@craco/craco”或”craco-less”时出现如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to resolve dependency tree error when installing npm packages</span><br></pre></td></tr></table></figure><p>请在安装指令中加入”–force”参数，忽视依赖版本匹配的问题。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><font color=red>使用</font></h3><p>当在react组件中使用Antd UI，如果要自定义该UI样式，请使用less替代css。</p><p>在less文件的开头添加如下代码，以引入antd的默认样式。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.less&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再在后面写自定义样式，它们会覆盖掉对应的默认样式。此处以Antd的Search UI为例，完整的示例less样式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是在js中引入less时，如果该项目是按照上述<a href="https://ant.design/docs/react/use-with-create-react-app-cn">Antd配置教程</a>进行的配置，使用less样式时应参照下述代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.less&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Search</span> <span class="attr">className</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Search</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./App.less&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Search</span> <span class="attr">className</span>=<span class="string">&#123;styles.search&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Search</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><font color=red>如果less不生效</font>，请在后面加!important，具体代码参考如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.head-search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">35%</span>;<span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-仅create-react-app-less-不使用Antd"><a href="#2-仅create-react-app-less-不使用Antd" class="headerlink" title="2. 仅create-react-app + less 不使用Antd"></a>2. 仅create-react-app + less 不使用Antd</h2><p>需要手动暴露webpack，并手动修改webpack.config.js配置。教程参考<a href="https://www.jianshu.com/p/25b60a1ca2c2?u_atoken=4b0bb87c-a479-472e-9a9a-96c5463cb33d&u_asession=01jH2wEzRJoDftF3RL1eGf8L0lRqLm_dQ3NX_-LBzWuXNdVA0DIzM0RCKlC8LIjZnIX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_GnCBSVJdii6ukzyKHewtHPpcarp92QKzyJKyYjREPlmBkFo3NEHBv0PZUm6pbxQU&u_asig=05Pnua6R1iuwwgTDCYRJwWW3qRvqz4lNK30rW0-pzb5tVABqPRxwlKuaGP5eIXM8TeBEqHrCOhFjeEF3fRTDtmdKcc1-qHis1Xn4Lrv5kdAXaroWVFrAzJh5eghfE6r-sEhSaqb85epguVp57UXAa2RLGrgrFDhGZ7-0BGKIWsjnX9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzVzwICAEQFDoVMKSoupS_sbE9T5O9Gtki69-pDS2iOKfWPRPQyB_SKrj-61LB_f61u3h9VXwMyh6PgyDIVSG1W_NOHl1Ma8Samun2RzZeeGTD9uwmCf3Jd00RcjlGJAS6x1FI61OW4aupNLi9cTsxlRZoyMCR_qmgUGGYhPRLsGemWspDxyAEEo4kbsryBKb9Q&u_aref=fVkq+dQfTxx1R2ryO4sOiXtyeNc=">此处</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用mac进行移动端Safari的web开发</title>
      <link href="/2022/07/15/%E4%BD%BF%E7%94%A8mac%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AFSafari%E7%9A%84web%E5%BC%80%E5%8F%91/"/>
      <url>/2022/07/15/%E4%BD%BF%E7%94%A8mac%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AFSafari%E7%9A%84web%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>用于学习响应式页面的开发。</p><h2 id="1-设置"><a href="#1-设置" class="headerlink" title="1.设置"></a>1.设置</h2><p>在Safari浏览器的preference中，选择“高级”，然后勾选“在菜单栏中显示开发菜单”。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>打开Safari浏览器，进入想要测试的页面，在菜单栏中的“开发”选项里点击“进入响应式设计模式”。<br><br/><br><br/><br><font color=red><br>注意：要先进入测试页面，再进入响应式设计模式。否则菜单栏中“进入响应式设计模式”无法被选中。<br></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新设备测试</title>
      <link href="/2022/07/10/%E6%96%B0%E8%AE%BE%E5%A4%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/07/10/%E6%96%B0%E8%AE%BE%E5%A4%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="M1-Pro-就是快！！！"><a href="#M1-Pro-就是快！！！" class="headerlink" title="M1 Pro 就是快！！！"></a>M1 Pro 就是快！！！</h1><h1 id="测试一下node16对hexo的支持"><a href="#测试一下node16对hexo的支持" class="headerlink" title="测试一下node16对hexo的支持"></a>测试一下node16对hexo的支持</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitignore失效的处理方法</title>
      <link href="/2021/11/10/gitignore%E5%A4%B1%E6%95%88%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/10/gitignore%E5%A4%B1%E6%95%88%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>如果出现gitignore失效的情况，很有可能是想要忽视的文件已经被git追踪了。<br><br>这时需要清空git缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GithubPages写博客遇到的一些问题</title>
      <link href="/2021/11/10/%E4%BD%BF%E7%94%A8GithubPages%E5%86%99%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/10/%E4%BD%BF%E7%94%A8GithubPages%E5%86%99%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>hexo d -g 将把本地博客内容推送到github上。注意，所推送到的github仓库的拥有者，要与本地的ssh公钥关联</p><p>github pages仓库名称要和用户名一样，不然博客内容会在子目录里：<br><br>例如，用户名称是aaa，github pages仓库名为bbb。<br>那么github pages的默认域名就会变为 aaa.github.io/bbb.github.io ，<br>这不但形式上不美观，而且会造成网页的渲染问题。<br><br>若github pages仓库名称与用户名一致，那么域名为 aaa.github.io，不会出现任何问题。</p><p>vscode编辑md文档按 cmd + shift + v 进入预览模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/09/hello-world/"/>
      <url>/2021/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
